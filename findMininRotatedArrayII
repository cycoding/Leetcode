public class Solution {
    public int findMin(int[] num) {
        // difference with I: in I there is no need to worry the equal condition
        // here, with equality, we can't decide clealy which parts mid and end should be
        if(num == null || num.length == 0)
            return 0;
        int start = 0;
        int end = num.length-1;
        int min = Integer.MAX_VALUE;
        // the key concept here is that if mid is in same part of end, then mid <= end
        while(start <= end){
            int mid = (start + end)/2;
            min = Math.min(min, num[mid]);
            // meaning mid is in the former and end in latter, so we should update start
            if(num[mid] > num[end])
                start = mid + 1;
            // meaning mid and end are in same part, the latter part, so we should find lower part, update end
            else if(num[mid] < num[end])
                end = mid - 1;
            else{
                // if mid == end == start, then mid and end could be in latter part or in different parts
                // we can't decide so can only linearly reduce range
                if(num[mid] == num[start]){
                    start++;
                    end--;
                }
                // if mid == end != start.
                // 1) mid and end in latter part, then obviously from mid to end are all equal, the smallest could
                //    only be between start and min, so we reset end
                // 2) mid in former and end in latter, since mid >= start and mid != start, so mid>start, but end <= start, 
                //    so this case does not exist.
                else
                    end = mid - 1;
            }
        }
        return min;
    }
}
